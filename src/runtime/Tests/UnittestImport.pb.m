// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UnittestImport.pb.h"

@implementation UnittestImportRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UnittestImportRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ImportEnumIsValidValue(ImportEnum value) {
  switch (value) {
    case ImportEnumImportFoo:
    case ImportEnumImportBar:
    case ImportEnumImportBaz:
      return YES;
    default:
      return NO;
  }
}
@interface ImportMessage ()
@property int32_t d;
@end

@implementation ImportMessage

- (BOOL) hasD {
  return !!hasD_;
}
- (void) setHasD:(BOOL) value {
  hasD_ = !!value;
}
@synthesize d;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.d = 0;
  }
  return self;
}
static ImportMessage* defaultImportMessageInstance = nil;
+ (void) initialize {
  if (self == [ImportMessage class]) {
    defaultImportMessageInstance = [[ImportMessage alloc] init];
  }
}
+ (ImportMessage*) defaultInstance {
  return defaultImportMessageInstance;
}
- (ImportMessage*) defaultInstance {
  return defaultImportMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasD) {
    [output writeInt32:1 value:self.d];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasD) {
    size += computeInt32Size(1, self.d);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ImportMessage*) parseFromData:(NSData*) data {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromData:data] build];
}
+ (ImportMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ImportMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromInputStream:input] build];
}
+ (ImportMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ImportMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ImportMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ImportMessage_Builder*) builder {
  return [[[ImportMessage_Builder alloc] init] autorelease];
}
+ (ImportMessage_Builder*) builderWithPrototype:(ImportMessage*) prototype {
  return [[ImportMessage builder] mergeFrom:prototype];
}
- (ImportMessage_Builder*) builder {
  return [ImportMessage builder];
}
- (ImportMessage_Builder*) toBuilder {
  return [ImportMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasD) {
    [output appendFormat:@"%@%@: %@\n", indent, @"d", [NSNumber numberWithInt:self.d]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ImportMessage class]]) {
    return NO;
  }
  ImportMessage *otherMessage = other;
  return
      self.hasD == otherMessage.hasD &&
      (!self.hasD || self.d == otherMessage.d) &&
      
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasD) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.d] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ImportMessage_Builder()
@property (retain) ImportMessage* result;
@end

@implementation ImportMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ImportMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ImportMessage_Builder*) clear {
  self.result = [[[ImportMessage alloc] init] autorelease];
  return self;
}
- (ImportMessage_Builder*) clone {
  return [ImportMessage builderWithPrototype:result];
}
- (ImportMessage*) defaultInstance {
  return [ImportMessage defaultInstance];
}
- (ImportMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ImportMessage*) buildPartial {
  ImportMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ImportMessage_Builder*) mergeFrom:(ImportMessage*) other {
  if (other == [ImportMessage defaultInstance]) {
    return self;
  }
  if (other.hasD) {
    [self setD:other.d];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ImportMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ImportMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setD:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasD {
  return result.hasD;
}
- (int32_t) d {
  return result.d;
}
- (ImportMessage_Builder*) setD:(int32_t) value {
  result.hasD = YES;
  result.d = value;
  return self;
}
- (ImportMessage_Builder*) clearD {
  result.hasD = NO;
  result.d = 0;
  return self;
}
@end

